name: Build, Test and Release

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  # Build native libraries for all platforms
  build-native:
    name: Build Native Library (${{ matrix.os }} ${{ matrix.arch }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            output_path: src/cpp/build/bin/Release/minja_shim_ext.dll
            artifact_name: minja-win-x64
          - os: ubuntu-latest
            output_path: src/cpp/build/lib/libminja_shim_ext.so
            artifact_name: minja-linux-x64
          - os: macos-latest
            output_path: src/cpp/build/lib/libminja_shim_ext.dylib
            artifact_name: minja-osx-x64
            arch: x64
          - os: macos-latest
            output_path: src/cpp/build/lib/libminja_shim_ext_arm64.dylib
            artifact_name: minja-osx-arm64
            arch: arm64
            
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true
        fetch-depth: 0
    
    - name: Setup CMake
      uses: lukka/get-cmake@latest

    # Setup Python for running fetch_templates_and_goldens script
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    # Install all Python dependencies for fetch_templates_and_goldens
    - name: Install Python dependencies
      run: python -m pip install -r requirements.txt
      shell: bash

    - name: Configure CMake
      working-directory: src/cpp
      run: |
        if [[ "${{ matrix.arch }}" == "arm64" && "${{ matrix.os }}" == "macos-latest" ]]; then
          cmake -B build -DCMAKE_BUILD_TYPE=Release -DCMAKE_OSX_ARCHITECTURES=arm64
        else
          cmake -B build -DCMAKE_BUILD_TYPE=Release
        fi
      shell: bash
      
    - name: Build
      working-directory: src/cpp
      run: cmake --build build --config Release

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}
        path: ${{ matrix.output_path }}
        if-no-files-found: error

  # Build, test, and package .NET project
  build-and-package:
    name: Build, Test and Package (.NET)
    runs-on: ubuntu-latest
    needs: build-native
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'
        
    - name: Create necessary directories for native binaries
      run: |
        mkdir -p src/cpp/build/bin/Release
        mkdir -p src/cpp/build/lib/Release
        
    - name: Download Windows native artifact
      uses: actions/download-artifact@v4
      with:
        name: minja-win-x64
        path: src/cpp/build/bin/Release
        
    - name: Download Linux native artifact
      uses: actions/download-artifact@v4
      with:
        name: minja-linux-x64
        path: src/cpp/build/lib/Release
        
    - name: Download macOS x64 native artifact
      uses: actions/download-artifact@v4
      with:
        name: minja-osx-x64
        path: src/cpp/build/lib/Release
        
    - name: Download macOS ARM64 native artifact
      uses: actions/download-artifact@v4
      with:
        name: minja-osx-arm64
        path: src/cpp/build/lib/Release
    
    - name: Run tests
      run: dotnet test --configuration Release
        
    - name: Install dotnet-releaser tool
      run: dotnet tool install --global dotnet-releaser
      
    - name: Build and Package with dotnet-releaser
      run: |
        # For tags (releases) or commits to main: publish to NuGet and create GitHub release
        if [[ $GITHUB_REF == refs/tags/v* ]] || [[ $GITHUB_REF == refs/heads/main ]]; then
          echo "Publishing release for ${GITHUB_REF#refs/tags/}${GITHUB_REF#refs/heads/}"
          dotnet-releaser run --nuget-token "${{ secrets.NUGET_API_KEY }}" --github-token "${{ github.token }}" dotnet-releaser.toml
        else
          echo "Building packages without publishing"
          dotnet-releaser build dotnet-releaser.toml
        fi
      env:
        GITHUB_USER: ${{ github.repository_owner }}
        GITHUB_REPO: ${{ github.repository }}
        NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
      shell: bash
